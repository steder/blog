<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-15T09:59:36-05:00</updated><id>http://localhost:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/09/15/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-09-15T09:38:10-05:00</published><updated>2017-09-15T09:38:10-05:00</updated><id>http://localhost:4000/jekyll/update/2017/09/15/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/09/15/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Software Illustrated: I’m just trying to change this lightbulb</title><link href="http://localhost:4000/engineering/management/gifs/software/illustrated/2014/12/31/software-engineering-illustrated-im-just-trying-to-change-this-lightbulb.html" rel="alternate" type="text/html" title="Software Illustrated: I'm just trying to change this lightbulb" /><published>2014-12-31T07:03:00-06:00</published><updated>2014-12-31T07:03:00-06:00</updated><id>http://localhost:4000/engineering/management/gifs/software/illustrated/2014/12/31/software-engineering-illustrated-im-just-trying-to-change-this-lightbulb</id><content type="html" xml:base="http://localhost:4000/engineering/management/gifs/software/illustrated/2014/12/31/software-engineering-illustrated-im-just-trying-to-change-this-lightbulb.html">&lt;h1 id=&quot;the-gif&quot;&gt;The GIF&lt;/h1&gt;

&lt;p&gt;I like to think that I’m an GIF afficionado, but it’s hard to overstate how much this GIF can help one understand about software engineering.&lt;/p&gt;

&lt;p&gt;Let it wash over you.  Watch it a few times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gifs/im_just_trying_to_change_this_lightbulb.gif&quot; alt=&quot;a_simple_problem&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;just-the-facts&quot;&gt;Just the facts&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Hal enters, walks to the kitchen and immediately tries to turn on a light in the kitchen&lt;/li&gt;
  &lt;li&gt;Hal turns it off and on again&lt;/li&gt;
  &lt;li&gt;Hal check the bulb and decides it needs to be replaced&lt;/li&gt;
  &lt;li&gt;Hal goes to a kitchen cabinet to get a bulb&lt;/li&gt;
  &lt;li&gt;As he’s reaching for the bulb he notes the shelf is loose&lt;/li&gt;
  &lt;li&gt;Hal decides to fix the shelf and opens a drawer to get a screwdriver&lt;/li&gt;
  &lt;li&gt;The drawer squeaks so Hal decides to get WD-40 to fix the squeak&lt;/li&gt;
  &lt;li&gt;The WD-40 is empty so Hal decides to drive tot he store to get some more&lt;/li&gt;
  &lt;li&gt;His car won’t start&lt;/li&gt;
  &lt;li&gt;Hal decides to fix the car&lt;/li&gt;
  &lt;li&gt;Lois comes home and asks Hal to please drop what he’s doing and fix the lightbulb in the kitchen&lt;/li&gt;
  &lt;li&gt;Hal exclaims that that’s what he’s currently trying to do by fixing the car&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;technical-debt&quot;&gt;Technical Debt&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hal and Lois just illustrated for us what software people like to call “Technical Debt”.
Technical debt conceptually leans very heavily on the financial concept of debt.  {“ Essentially,
you accumulate technical debt by taking short cuts or not fixing problems when they occur. “}  Deferring fixing
bugs or avoiding building a feature the “right way” either by ignoring best practices or cutting corners in
the system to hit a target date forces you to essentially mortgage your code base and take on “Technical Debt”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some software issues are incorrectly interpreted as debt.  For example, bugs in your software are not necessarily debt.  Some bugs can exist for years and are a non-issue.  Some people think something is a bug when it’s really a feature of the system.  Some bugs occur only infrequently or no one knows how they bug should really be fixed.  While these are frustrating, they generally not issues of debt.&lt;/p&gt;

&lt;p&gt;Instead, technical debt is typically design decisions that were made in the name of expediency that you may or may not have realized would cause problems down the line.  Sadly, experienced engineers sometimes incur this debt despite the fact they know it will eventually be a problem because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’ll rewrite it before we get enough customers that scalability will be an issue&lt;/li&gt;
  &lt;li&gt;I’ll fix it after RELEASE_DATE/CUSTOMER_DEMO when we finally have some time to do things right&lt;/li&gt;
  &lt;li&gt;I’ll fix it before I leave the company&lt;/li&gt;
  &lt;li&gt;No one cares about quality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of some design decisions and tradeoffs that may create debt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’ll write the kernel of the application in a “scripting” language and optimize later, if at all&lt;/li&gt;
  &lt;li&gt;We’ll deploy this by hand&lt;/li&gt;
  &lt;li&gt;We’ll use an ORM to do data access because we don’t know SQL&lt;/li&gt;
  &lt;li&gt;We’ll stop fixing bugs in this OLD_THING while we replatform to the NEW_THING&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;us-versus-them&quot;&gt;Us versus them?&lt;/h1&gt;

&lt;p&gt;Typically any software system has some amount of technical debt so it’s not always clear when that debt becomes a serious problem for your company or team.&lt;/p&gt;

&lt;p&gt;Part of what makes technical debt challenging is that software people and business people within your organization likely look at the priority of paying down technical debt completely differently.&lt;/p&gt;

&lt;p&gt;For example, if Hal is a typical software person on your team, from his perspective he’s trying to finish the project “Have working kitchen lights” as quickly as possible while following the boyscout rule and at each step of the process leaving the camp site nicer than it was when he arrived.  In this case, that means fixing the loose shelf in kitchen cabinet, fixing the squeaky drawer, the car, etc.&lt;/p&gt;

&lt;p&gt;Assuming Lois is our CEO, she’s really confused by this behavior.  She’s thinking, that kitchen light is critical for the business and needs to be completed as soon as possible so other work can proceed, a new client can be signed, etc.  Any delay for minor issues like loose shelves or squeaky drawers seems like a complete waste.  Lois can completely understand the emergency car fix, but she’s still confused as to why that’s necessary now to simply change the lightbulb.&lt;/p&gt;

&lt;p&gt;From an engineering perspective folks look at Hal’s odyssey to change a lightbulb and they laugh wryly, or sigh deeply and think “I’ve lived through days or weeks like that where I’m just trying to complete a simple task but ‘Technical Debt’ and other roadblocks prevented me from making progress.”&lt;/p&gt;

&lt;p&gt;From a management perspective, folks just look at a team of software engineers that are inexplicably taking forever to accomplish a seemingly simple task. They question if they have the right people, if they need a new team, additional resources, or even worse, a replatform.&lt;/p&gt;

&lt;p&gt;First of all, let’s look at why software folks behave this way.&lt;/p&gt;

&lt;h2 id=&quot;engineer-perspective&quot;&gt;Engineer Perspective&lt;/h2&gt;

&lt;p&gt;Engineers think a number of things that are all somewhat true and attempt to overcompensate for those things with this sort of extreme-Hal behavior:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I want to do a quality job and this isn’t good enough.  If only I had more time!&lt;/li&gt;
  &lt;li&gt;I don’t think my boss will care about this.  If I ask them to prioritize it they’ll tell me not to work on it.&lt;/li&gt;
  &lt;li&gt;If they won’t let me work on it now they’ll never let me work on it and It’ll never be fixed! (keeps, creates debt)&lt;/li&gt;
  &lt;li&gt;Our code base is already full of bugs, I don’t want to create more or do more maintenance work in the future.&lt;/li&gt;
  &lt;li&gt;Bugs cost us too much already in terms of maintenance and lost customers/sales, we have to improve quality (pay down debt)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now what’s true from an Engineering perspective is that this bug is likely not important enough to tackle right now and that it should be prioritized.&lt;/p&gt;

&lt;p&gt;What hopefully isn’t true in your business is that no-one will ever care about this issue and that it will never be fixed.  Instead, I hope you periodically address technical issues brought up during prioritized work and you fix bugs like “Loose shelf in kitchen cabinet”.&lt;/p&gt;

&lt;h2 id=&quot;business-perspective&quot;&gt;Business Perspective&lt;/h2&gt;

&lt;p&gt;Business folks of course are more concerned about time to market and really are just looking at everything being done as quickly as possible so that whatever is contingent on the work being complete can proceed.&lt;/p&gt;

&lt;p&gt;Business folks think the following things that are also somewhat true:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Quality can slip a “little bit” to hit target dates (it’s okay to take on debt to make a sale)&lt;/li&gt;
  &lt;li&gt;I’m not sure I trust the software people with their computer wizardry&lt;/li&gt;
  &lt;li&gt;In previous situations they were able to hit the date despite saying they couldn’t, they just need to work harder&lt;/li&gt;
  &lt;li&gt;This is the most important project at the company and they are the highest paid people, it’s okay if they work harder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yes, quality can slip a little bit to hit a date, and yes, the project is likely important and yes, you likely pay these software folks quite well compared to other roles in your company.&lt;/p&gt;

&lt;p&gt;However, a lack of trust is not really a good reason to assume that your software group is dragging their feet and despite the high pay, sometimes equipment and resources are still an issue.  Perhaps better IT infrastructure, better tools, or additional personnel could complete a project more quickly and if something is truly that important to your business perhaps spending more money to acquire additional resources is the answer.&lt;/p&gt;

&lt;p&gt;Fortunately, business people actually have a good understanding of debt and borrowing.  Unfortunately, they likely don’t have the technical expertise to understand if the debt they’ve accumulated is a little or a lot.  Determining the amount of debt the business has is something that requires a good working relationship, even trust, between the business and engineering sides of an organization.&lt;/p&gt;

&lt;h1 id=&quot;addressing-technical-debt&quot;&gt;Addressing Technical Debt&lt;/h1&gt;

&lt;p&gt;The path towards responsible tech debt financials lies somewhere between these two view points.  Typically the business side and software side are both looking out for the best interests of the business or project of which they’re a member.  I think that the appropriate response to the presence of technical debt on your team is the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Carve out a portion of your software team’s time to pay down technical debt.  You want to   pay down as much as you can to address some of the principle part of the loan, so that you are not just paying down interest.  To do this I advocate treating your engineering / software team as an equal stakeholder in the business in terms of time allocated.&lt;/p&gt;

    &lt;p&gt;For example, if you currently work on 4 projects at a time, one for each of 4 business units at your company, you first need to recognize that there are actually 5 “real” projects you need to be able to tackle and that a portion of hours from the 4 projects needs to be allocated to this fifth, home improvement project.&lt;/p&gt;

    &lt;p&gt;e.g.: if you’re currently allocating 25 hours a week to each of the four projects, I’d reduce each of those projects hours from 25 to 20 and run 5 projects at 20 hours a piece.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Prioritize technical debt tasks.  Estimate them and treat them like real work.  The only thing really different is that the stakeholder for this work is the engineers, not some customer or project manager elsewhere in your company.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a “home improvement” rotation or otherwise allocate this work to members of your software team.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Demo this debt retirement work to your software team, and where appropriate, to the rest of the business.  Better quality, faster, and/or easier to use features should be relevant to all and something that should be recognized and positively reinforced.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">The GIF</summary></entry><entry><title type="html">Twisted python development server with restart on code change</title><link href="http://localhost:4000/2012/10/04/twisted-python-development-server-with.html" rel="alternate" type="text/html" title="Twisted python development server with restart on code change" /><published>2012-10-04T00:00:00-05:00</published><updated>2012-10-04T00:00:00-05:00</updated><id>http://localhost:4000/2012/10/04/twisted-python-development-server-with</id><content type="html" xml:base="http://localhost:4000/2012/10/04/twisted-python-development-server-with.html">&lt;p&gt;I really enjoy working with the Twisted framework because it allows me
to easily and cleanly blend multiple protocols and services together in
a single application.  However, when I’m developing and testing a
Twisted-based server it is sometimes inconvenient to have to manually
restart the server after each change.&lt;/p&gt;

&lt;p&gt;Anyway, to that end I wrote a little wrapper script to run in place of
the Twisted command-line tool ‘twistd’ called ‘twistr’.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/steder/twistr&quot;&gt;Twistr&lt;/a&gt; very simply wraps ‘twistd’ and
restarts the twistd process on changes.&lt;/p&gt;

&lt;p&gt;If this is interesting or helpful to you feel free to check it out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install twistr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;… should do the trick.&lt;/p&gt;</content><author><name></name></author><summary type="html">I really enjoy working with the Twisted framework because it allows me to easily and cleanly blend multiple protocols and services together in a single application.  However, when I’m developing and testing a Twisted-based server it is sometimes inconvenient to have to manually restart the server after each change.</summary></entry><entry><title type="html">Starcraft Emacs Mode (Or How to make an Emacs Minor-mode)</title><link href="http://localhost:4000/2012/04/29/starcraft-emacs-mode-or-how-to-make.html" rel="alternate" type="text/html" title="Starcraft Emacs Mode (Or How to make an Emacs Minor-mode)" /><published>2012-04-29T00:00:00-05:00</published><updated>2012-04-29T00:00:00-05:00</updated><id>http://localhost:4000/2012/04/29/starcraft-emacs-mode-or-how-to-make</id><content type="html" xml:base="http://localhost:4000/2012/04/29/starcraft-emacs-mode-or-how-to-make.html">&lt;div class='post'&gt;
A friend of mine once said that he was terrible at Starcraft because his &quot;&lt;a href=&quot;http://www.youtube.com/watch?v=YbpCLqryN-Q&quot;&gt;APM&lt;/a&gt;&quot; was too low. &amp;nbsp;APM, if you're not familiar with the acronym stands for &amp;nbsp;&quot;Actions Per Minute&quot; and refers to keypresses or mouse clicks per minute while playing the RTS turned sport, Starcraft. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My friend continued saying that he actually thought his APM while programming was quite high, certainly higher than anything he could manage playing Starcraft. &amp;nbsp;Of course, having nothing better to, I hacked up an Emacs minor mode that would track all your key presses within Emacs and total up an APM score for you.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;float: left; margin-right: 1em; text-align: left;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-IEqs4i4YinM/T1Y8vMYfv3I/AAAAAAAAKDQ/NoR0VglOlMI/s1600/Screen+Shot+2012-03-06+at+10.33.51+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;65&quot; src=&quot;http://2.bp.blogspot.com/-IEqs4i4YinM/T1Y8vMYfv3I/AAAAAAAAKDQ/NoR0VglOlMI/s640/Screen+Shot+2012-03-06+at+10.33.51+AM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;starcraft.el in 'action'&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Yes, that &quot;sc&quot; in the modeline stands for Starcraft. &amp;nbsp;Install starcraft.el in your emacs configuration and find how hard it is to inflate your actions per minute while writing code in emacs compared to spaming hotkeys in Starcraft 2.&lt;br /&gt;&lt;br /&gt;Really, I just wanted to do a more substantive bit of Emacs Lisp and this was a fun excuse to do so. &lt;br /&gt;&lt;br /&gt;You can download and play with the mode &lt;a href=&quot;https://gist.github.com/1990900&quot;&gt;here&lt;/a&gt; on &lt;a href=&quot;https://gist.github.com/1990900&quot;&gt;Github&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Andrew&lt;/div&gt;
&lt;div class='content'&gt;
Nice.  I think I will install this as a &amp;quot;productivity measuring tool&amp;quot; for all my developers.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">A friend of mine once said that he was terrible at Starcraft because his &quot;APM&quot; was too low. &amp;nbsp;APM, if you're not familiar with the acronym stands for &amp;nbsp;&quot;Actions Per Minute&quot; and refers to keypresses or mouse clicks per minute while playing the RTS turned sport, Starcraft. My friend continued saying that he actually thought his APM while programming was quite high, certainly higher than anything he could manage playing Starcraft. &amp;nbsp;Of course, having nothing better to, I hacked up an Emacs minor mode that would track all your key presses within Emacs and total up an APM score for you.starcraft.el in 'action'Yes, that &quot;sc&quot; in the modeline stands for Starcraft. &amp;nbsp;Install starcraft.el in your emacs configuration and find how hard it is to inflate your actions per minute while writing code in emacs compared to spaming hotkeys in Starcraft 2.Really, I just wanted to do a more substantive bit of Emacs Lisp and this was a fun excuse to do so. You can download and play with the mode here on Github. Comments Andrew Nice. I think I will install this as a &amp;quot;productivity measuring tool&amp;quot; for all my developers.</summary></entry><entry><title type="html">Diablo 3 Beta Impressions</title><link href="http://localhost:4000/beta/gaming/2012/03/03/diablo-3-beta-impressions.html" rel="alternate" type="text/html" title="Diablo 3 Beta Impressions" /><published>2012-03-03T00:00:00-06:00</published><updated>2012-03-03T00:00:00-06:00</updated><id>http://localhost:4000/beta/gaming/2012/03/03/diablo-3-beta-impressions</id><content type="html" xml:base="http://localhost:4000/beta/gaming/2012/03/03/diablo-3-beta-impressions.html">&lt;p&gt;I recently got access to the Diablo 3 Beta test and have now logged
upwards of 30 hours across two builds of the game (Patches 12 and 13).&lt;/p&gt;

&lt;p&gt;Assuming you’re already familiar with Diablo I won’t waste your time.
 It is the most Diablo-licious game to come out since Diablo 2.  Odds
are very high that if you liked that game you’ll like this one too.  The
music, environments, and atmosphere all evoke nostalgia for the earlier
games while adding some nice new touches like destructible environments
and more dynamic monster attacks.&lt;/p&gt;

&lt;p&gt;The gameplay is the same mix of hack-n-slash and random loot that was so
addictive in D2 and WoW.  As a recovering WoW player I found it entirely
too comfortable to slip into old patterns and start min-maxing and
hunting for new bits of gear to improve a particular slot.  This seems
to be really helped by the addition of the AH as I was able to quickly
spend some of my accumulated gold to buy some real upgrades.&lt;/p&gt;

&lt;p&gt;The story starts off slow with the return of some elements and
characters you’ll remember well from D1 and D2.  Yes, Deckard Cain once
again thinks you should stay awhile and listen.&lt;/p&gt;

&lt;p&gt;Perhaps the strongest compliment I can offer is that unlike Torchlight,
which after the first 10 or so levels left me thinking “whatever” and
turning the game off, I felt compelled by Diablo 3 to continue playing,
tweaking my character, leveling up to get access to the next ability so
I could try new strategies and new weapons, etc.  The story in the demo
only hints at the real plot line of D3 but even a brief glimpse made me
really wish I had the full game right there and then.&lt;/p&gt;

&lt;h2 id=&quot;changes&quot;&gt;Changes&lt;/h2&gt;

&lt;p&gt;While I haven’t played Diablo 2 in a long time here’s the big changes
from my perspective.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New classes (4 new ones and the 5th is the returning Barbarian), and
you have a little more customization of appearance because you can
select a gender (female Barbarians are awesome!)&lt;/li&gt;
  &lt;li&gt;New resource generation mechanics:  This will be pretty familiar to
folks from WoW or who enjoyed the assassin from D2.  Every class has
a different resource mechanic.  Barbarians build rage by striking
enemies with certain attacks and then spend that rage to deal extra
damage or perform special abilities (shouts, leaps, etc).  Monks
have ‘spirit’ which regenerates to full but can also be recharged /
spent using different abilities.  Demon Hunters have a dueling
resources of “hatred” and “discipline”, Sorcerors have energy, and
Witch Doctors have the old school Mana mechanics.&lt;/li&gt;
  &lt;li&gt;No stat point allocation: D2 required you to spend time putting
points into stats like Strength, Dexterity, etc.  Of course there
was typically one or two ideal builds and everything else was kind
of gimpy due to the nature of the best gear and abilities for your
class.  I think blizzard (rightly, in my opinion) identified that
while die-hard players may enjoy rerolling characters constantly,
that that level of punishing fiddly customization is not really
giving you more choice but instead just more chances to do things
wrong.&lt;/li&gt;
  &lt;li&gt;No talent trees: Instead abilities unlock as you level up.  You also
unlock abilities slots, so the number of active abilities is
initially limited but eventually expands to 6(?).  You can change
abilities at any time.  Respec’ing your character just has a brief
(15-30s) cooldown to force you to think ahead a bit.  Basically you
don’t need to reroll your character after spending a few points on a
skill that sucks.&lt;/li&gt;
  &lt;li&gt;In game gold / $ Auction House:  You can now buy and sell items
using in game currency or actual real world currency.  I like the
notion of easy trading and a way to find items that just never seem
to drop for you.&lt;/li&gt;
  &lt;li&gt;Online Requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the class and resource changes are great.  I don’t love all the
classes, but that’s always the case in games like this.  The sorceror,
demon hunter, and barbarian are all really fun to me so the fact that I
think the monk is sort of a wet blanket and the witch doctor is kind of
gimpy aren’t really a big deal.  I’m sure others will love the monk and
WD.&lt;/p&gt;

&lt;p&gt;The changes to stat points, and abilities seem to be pretty
controversial to hardcore d2 fans but as someone who enjoyed but didn’t
love D2 I think it’s a HUGE improvement.  I will be able to play Diablo
3 and experiment with builds without fear that I’ll completely screw
myself over in the harder difficulties and higher levels with a bad
decision made on normal difficulty at level 10.&lt;/p&gt;

&lt;p&gt;So while some are bemoaning the lack of permanent build decisions I’m
really enjoying the freedom to customize and experiment.&lt;/p&gt;

&lt;h3 id=&quot;micro-transactions&quot;&gt;Micro-Transactions&lt;/h3&gt;

&lt;p&gt;With the real money Auction House this’ll be the first Blizzard game to
include micro-transactions.  I’m not entirely sold on the idea of buying
and selling digital equipment for $ but I realize what Blizzard is
trying to do.  They’re looking for ways to help cover the costs of
continued development and support over the life of a game like Diablo 3.
 On every real money transaction Blizzard will take a small “listing
fee” which millions of players and auctions should begin to add up.
 Hopefully this means that D3 will be a more dynamic game with more
frequent changes and new content.&lt;/p&gt;

&lt;h3 id=&quot;concerns&quot;&gt;Concerns&lt;/h3&gt;

&lt;p&gt;I am concerned that with some of this simplification that there’s
perhaps something missing after you’ve played through the game a few
times.  I think many players are concerned that the game won’t have the
depth of Diablo 2.  While I share the concern that the game may be a bit
simplified in beta (or even at release) I would encourage people to look
at every other Blizzard game including Diablo 1 and 2.  They all went
through large changes through patches and expansions.  I also doubt
we’ve seen all the tricks that D3 has up its sleeve at this point.&lt;/p&gt;

&lt;p&gt;However, I do have one major concern about Diablo 3:  The requirement
for internet connectivity for every aspect of the game.&lt;/p&gt;

&lt;p&gt;I realize that part of why Blizzard wants the game to always be online
is to help deal with item hacking, cheating, etc.  I realize that they
also want to prevent piracy and requiring folks to have an account and
login to Blizzard is a way to do that.&lt;/p&gt;

&lt;p&gt;Unfortunately, unlike Starcraft 2, which also requires players to login
to their battle.net account to play the game, Diablo 3 seems to have
serious gameplay lag when I’m playing a private game, aka single player,
game while I’m uploading or downloading large files.  While in SC2 I
still may have lag logging in to the game servers, and I may even be
prevented from playing my game if I have no internet connection, but at
least when I’m playing the game single player there is no lag.
 Downloading large files and playing the Starcraft 2 campaign are
completely compatible.&lt;/p&gt;

&lt;p&gt;However, I was recently attempting to play the Diablo 3 beta while
simultaneously downloading The Witcher 2 from steam.  (Great game, by
the way! :-)).  As I was playing I found that the straight-from-wow
connection status bar was red (indicating high latency).  Thinking that
the connection to Blizzards servers was primarily for login, save games,
loot randomization, monster spawns, etc I figured there would be no
problem actually playing the game just some delays getting started.
 Instead, I would walk my character up to a monster, click to attack,
wait a second for the attack animation to play, wait another second for
the monster to recognize that the attack had taken place, and then
another second for the monster death animation and loot popup.  &lt;/p&gt;

&lt;p&gt;Essentially, the game is like WoW in that every action is first sent to
the server and validated.  I realize this is the right decision for a
purely multiplayer game.  However, I think there should be a way to play
Diablo 3 as a single player game in lower bandwidth situations without
completely compromising the gameplay experience similar to the way
Starcraft 2 seems to work.  Ideally there would be some way to play
without any internet connection but I doubt that’s going to happen.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I remain excited for Diablo 3, as it is the most Diablo-ey game I’ve
played in a long time (yes, I’ve played Torchlight!) but I’ve had to
readjust my expectations to think of it as more of an MMO style game.  &lt;/p&gt;</content><author><name></name></author><summary type="html">I recently got access to the Diablo 3 Beta test and have now logged upwards of 30 hours across two builds of the game (Patches 12 and 13).</summary></entry><entry><title type="html">Using Jinja2 from Twisted</title><link href="http://localhost:4000/twisted/python/2012/02/29/using-jinja2-from-twisted.html" rel="alternate" type="text/html" title="Using Jinja2 from Twisted" /><published>2012-02-29T00:00:00-06:00</published><updated>2012-02-29T00:00:00-06:00</updated><id>http://localhost:4000/twisted/python/2012/02/29/using-jinja2-from-twisted</id><content type="html" xml:base="http://localhost:4000/twisted/python/2012/02/29/using-jinja2-from-twisted.html">&lt;div class='post'&gt;
&lt;a href=&quot;http://pypi.python.org/pypi/txTemplate/1.0.0&quot;&gt;txTemplate&lt;/a&gt; is simply a set of adapters for some popular templating engines like Clearsilver, Genshi and Jinja2 to give them a consistent deferred-returning API.&amp;nbsp; I originally hacked this up because I used &lt;a href=&quot;http://www.twistedmatrix.com/&quot;&gt;Twisted&lt;/a&gt; and &lt;a href=&quot;http://genshi.edgewall.org/&quot;&gt;Genshi&lt;/a&gt; to replace a &lt;a href=&quot;http://www.webwareforpython.org/&quot;&gt;Webware&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Kid_(templating_language)&quot;&gt;Kid&lt;/a&gt; application.&lt;br /&gt;&lt;br /&gt;You can find the package here:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://pypi.python.org/pypi/txTemplate/1.0.0&quot;&gt;http://pypi.python.org/pypi/txTemplate/1.0.0&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;And the source for anyone interested in hacking on it is hosted on Github.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/steder/txtemplate&quot;&gt;https://github.com/steder/txtemplate&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Assuming I remain interested in hacking on this future enhancements will be a better incremental interface for large template rendering. &amp;nbsp;The current API generates the template asynchronously but doesn't provide a good way to write the response to clients in chunks, the assumption being that as long as you can buffer the template in memory you can chunk the response to the clients. &amp;nbsp;Also, if you don't finish rendering the template before beginning to send it to the client it's possible that the you'll hit an error while rendering and send only a partial response.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">txTemplate is simply a set of adapters for some popular templating engines like Clearsilver, Genshi and Jinja2 to give them a consistent deferred-returning API.&amp;nbsp; I originally hacked this up because I used Twisted and Genshi to replace a Webware and Kid application.You can find the package here:http://pypi.python.org/pypi/txTemplate/1.0.0And the source for anyone interested in hacking on it is hosted on Github.https://github.com/steder/txtemplateAssuming I remain interested in hacking on this future enhancements will be a better incremental interface for large template rendering. &amp;nbsp;The current API generates the template asynchronously but doesn't provide a good way to write the response to clients in chunks, the assumption being that as long as you can buffer the template in memory you can chunk the response to the clients. &amp;nbsp;Also, if you don't finish rendering the template before beginning to send it to the client it's possible that the you'll hit an error while rendering and send only a partial response.</summary></entry><entry><title type="html">Playing Words with Friends</title><link href="http://localhost:4000/python/programming/gaming/2012/01/28/playing-words-with-friends.html" rel="alternate" type="text/html" title="Playing Words with Friends" /><published>2012-01-28T00:00:00-06:00</published><updated>2012-01-28T00:00:00-06:00</updated><id>http://localhost:4000/python/programming/gaming/2012/01/28/playing-words-with-friends</id><content type="html" xml:base="http://localhost:4000/python/programming/gaming/2012/01/28/playing-words-with-friends.html">&lt;div class='post'&gt;
&lt;span style=&quot;font-family: inherit; font-size: large;&quot;&gt;Words with Friends&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;a href=&quot;http://www.wordswithfriends.com/&quot;&gt;Words with Friends&lt;/a&gt;, if you're not already familiar, is a game of Scrabble that lets you play asynchronously with friends over the internet.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;I recently started playing WoF because I like to think I have a large vocabulary and rarely get the opportunity to use it. &amp;nbsp;I also enjoy playing boardgames like Scrabble but between work and ... sleep... I don't often get the chance to get together with my friends and play &lt;/span&gt;&lt;a href=&quot;http://boardgamegeek.com/boardgame/24508/taluva&quot; style=&quot;font-family: inherit;&quot;&gt;Taluva &lt;/a&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;into the wee hours.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Anyway, I have a confession to make.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit; font-size: large;&quot;&gt;I'm terrible at Words with Friends&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Whenever it is my turn I look at my hand of letters: &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;ILNIREE&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;And think: &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;ILNIREE is not a word. &amp;nbsp;Darn.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;And then I start to mentally rearrange letters to see if I can make other words. &amp;nbsp;WoF's conveniently includes a &quot;Shuffle&quot; button so I hit that a few times... &amp;nbsp;And while given enough time I do come up with a word a few things bug me about this process.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;First of all, years of Google and Wikipedia use have atrophied important muscles like &quot;memory&quot;. &amp;nbsp;Second, i'm a programmer and that means:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit; font-size: large;&quot;&gt;Laziness&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Basically shuffling letters and checking or guessing that they are words is a perfectly straightforward although not terribly efficient way to try to optimize your scrabble game. &amp;nbsp;Of course, it's got a lot of drawbacks if you try to do it by hand. &amp;nbsp;It's slow and it's uninteresting. &amp;nbsp;To try to find every word possible with any of your 7 letters you'd need to try all permutations and there are over 10,000 permutations of 7 letters. &amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Anyway, I'm bad at Words with Friends but I like programming so once I started playing WoF of course I gravitated towards...&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit; font-size: large;&quot;&gt;Solving Words with Friends&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;Boring and repetitive work is exactly what computers are good at it! &amp;nbsp;In fact the Python program to generate all possible permutations of 7 letters (1 letter words, 2 letter words, 3 letter words, etc) is pretty straightforward especially with a little help from our friend &lt;a href=&quot;http://docs.python.org/library/itertools.html&quot;&gt;itertools&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;My first and simplest attempt involved putting the contents of the standard unix dictionary (/usr/share/dict/words) into a python dictionary (an excellent hash table implementation).&amp;nbsp;&lt;/span&gt;&lt;br /&gt;This isn't exactly what I came up with first but it should illustrate what I'm talking about:&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/1653998.js?file=words_simple.py&quot;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Of course you end up looking at a lot of permutations for 7 letters (~13 thousand) so this can take a little while.  It's still not slow on any reasonable computer but when you start adding in other letters to try and find words that might fit in with available spots on the board things can slow down.  For example, say you could play words that begin with t, l, or r.  Running the above getScrabbleLetters function for 10 letters requires you to check&amp;nbsp;9,864,101 permutations. &lt;br /&gt;&lt;br /&gt;Worse still, if you add in the notion of wildcards (9 letters plus some character like '*' to represent a wildcard) you end up repeating those over 9 million lookups 26 times to check all the other possible letters of the alphabet in the wildcard slot. &amp;nbsp;That's over 250 million dictionary lookups to find a fairly small list of unique words.&lt;br /&gt;&lt;br /&gt;However, if we step back for a moment and think about anagrams, a simple tweak can help process larger strings (and strings with wildcards) much more quickly.&lt;br /&gt;&lt;br /&gt;Imagine you've got a couple anagrams like &quot;was&quot; and &quot;saw&quot;. &amp;nbsp;They've got the same letters but count as two different words in our dictionary and require two separate lookups. &amp;nbsp;If we shift our perspective a little bit and start thinking about the letters as what's important we get some very nice performance improvements.&lt;br /&gt;&lt;br /&gt;We still use a hash table as our primary data structure but instead of using the words as the keys we use the sorted letters of a word as the key. &amp;nbsp;The values become lists of all the words which include those same letters. &amp;nbsp;It's a little bit more work to insert, as we first have to calculate what the key would be, and it's a little more work to lookup, as we have to iterate over the list of possible words. &amp;nbsp;But it's great any time we care just about anagrams and it's much more efficient in terms of the number of lookups required to find all the scrabble words. &amp;nbsp;For example, for the same 10 letter case from earlier we now need only&amp;nbsp;1024 lookups. &amp;nbsp;~26 thousand lookups for the wildcard case.&lt;br /&gt;&lt;br /&gt;Without further ado that solution looks like this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/1653998.js?file=sorted.py&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;One other really useful bit is a quick way to look for all the words that have a given suffix or prefix.  This is a little trickier than the anagram case but it's also more interesting because I got to spend a little time reading about a new data structure, a Trie.  A Trie is a tree-like structure optimized for storing strings. &amp;nbsp;The root node of the tree represents the empty string and each of its children represents the first letter of a word. &amp;nbsp;Every child of these nodes is the next letter in a word starting with that substring. &amp;nbsp;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;For example, a trie of nodes for the words &quot;an apple yum&quot; would look like:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-_yB946MXC2c/TxtAs0Lpi-I/AAAAAAAAAgM/l40QlNz4vBU/s1600/trie.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://2.bp.blogspot.com/-_yB946MXC2c/TxtAs0Lpi-I/AAAAAAAAAgM/l40QlNz4vBU/s320/trie.png&quot; width=&quot;163&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;So the trie solution for finding words that begin with a certain prefix is:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/1653998.js?file=trie.py&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;br /&gt;The suffix version is just a couple more lines with judicious use of the &lt;a href=&quot;http://docs.python.org/library/functions.html#reversed&quot;&gt;reversed&lt;/a&gt; function.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion and Next Steps&lt;/span&gt;&lt;br /&gt;I think that Words with Friends is a lot more fun now that I have my computer as a crutch. &amp;nbsp;I've enjoyed playing with some simple algorithms for finding algorithms and looking up strings.&lt;br /&gt;&lt;br /&gt;My next steps after today are going to be putting up my utilities here on my website so that I can share them with my non-programmer friends. &amp;nbsp;Building a simple web service for solving/cheating at scrabble is a hopefully interesting topic in its own right so building that will probably be my next blog post.&lt;br /&gt;&lt;br /&gt;After that I'm interested in taking this to its logical conclusion and actually building (and blogging about) a scrabble solver where you can enter in the whole state of the scrabble board and your hand and have it tell you all your possible moves (or at least the subset of moves that give you higher scores).&lt;br /&gt;&lt;br /&gt;If you made it this far you might be interested in the actual tested source code &lt;a href=&quot;https://github.com/steder/words&quot;&gt;here on github&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;dl&gt;&lt;dd&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Larry_Wall&quot;&gt;Larry Wall&lt;/a&gt;&amp;nbsp;calls this the first great virtue of a programmer. &amp;nbsp;&lt;/span&gt;&lt;/dd&gt;&lt;dt&gt;2&lt;/dt&gt;&lt;dd&gt;Perhaps a more honest heading here would be &quot;Cheating at Words With Friends&quot; :-)&lt;/dd&gt; &lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;/span&gt;&lt;div&gt;&lt;div&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt; &lt;/span&gt;&lt;/div&gt;&lt;/dl&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Words with FriendsWords with Friends, if you're not already familiar, is a game of Scrabble that lets you play asynchronously with friends over the internet.I recently started playing WoF because I like to think I have a large vocabulary and rarely get the opportunity to use it. &amp;nbsp;I also enjoy playing boardgames like Scrabble but between work and ... sleep... I don't often get the chance to get together with my friends and play Taluva into the wee hours.Anyway, I have a confession to make.I'm terrible at Words with FriendsWhenever it is my turn I look at my hand of letters: &amp;nbsp;ILNIREEAnd think: &amp;nbsp;ILNIREE is not a word. &amp;nbsp;Darn.And then I start to mentally rearrange letters to see if I can make other words. &amp;nbsp;WoF's conveniently includes a &quot;Shuffle&quot; button so I hit that a few times... &amp;nbsp;And while given enough time I do come up with a word a few things bug me about this process.First of all, years of Google and Wikipedia use have atrophied important muscles like &quot;memory&quot;. &amp;nbsp;Second, i'm a programmer and that means:Laziness1Basically shuffling letters and checking or guessing that they are words is a perfectly straightforward although not terribly efficient way to try to optimize your scrabble game. &amp;nbsp;Of course, it's got a lot of drawbacks if you try to do it by hand. &amp;nbsp;It's slow and it's uninteresting. &amp;nbsp;To try to find every word possible with any of your 7 letters you'd need to try all permutations and there are over 10,000 permutations of 7 letters. &amp;nbsp;Anyway, I'm bad at Words with Friends but I like programming so once I started playing WoF of course I gravitated towards...Solving Words with Friends2Boring and repetitive work is exactly what computers are good at it! &amp;nbsp;In fact the Python program to generate all possible permutations of 7 letters (1 letter words, 2 letter words, 3 letter words, etc) is pretty straightforward especially with a little help from our friend itertools.My first and simplest attempt involved putting the contents of the standard unix dictionary (/usr/share/dict/words) into a python dictionary (an excellent hash table implementation).&amp;nbsp;This isn't exactly what I came up with first but it should illustrate what I'm talking about:Of course you end up looking at a lot of permutations for 7 letters (~13 thousand) so this can take a little while. It's still not slow on any reasonable computer but when you start adding in other letters to try and find words that might fit in with available spots on the board things can slow down. For example, say you could play words that begin with t, l, or r. Running the above getScrabbleLetters function for 10 letters requires you to check&amp;nbsp;9,864,101 permutations. Worse still, if you add in the notion of wildcards (9 letters plus some character like '*' to represent a wildcard) you end up repeating those over 9 million lookups 26 times to check all the other possible letters of the alphabet in the wildcard slot. &amp;nbsp;That's over 250 million dictionary lookups to find a fairly small list of unique words.However, if we step back for a moment and think about anagrams, a simple tweak can help process larger strings (and strings with wildcards) much more quickly.Imagine you've got a couple anagrams like &quot;was&quot; and &quot;saw&quot;. &amp;nbsp;They've got the same letters but count as two different words in our dictionary and require two separate lookups. &amp;nbsp;If we shift our perspective a little bit and start thinking about the letters as what's important we get some very nice performance improvements.We still use a hash table as our primary data structure but instead of using the words as the keys we use the sorted letters of a word as the key. &amp;nbsp;The values become lists of all the words which include those same letters. &amp;nbsp;It's a little bit more work to insert, as we first have to calculate what the key would be, and it's a little more work to lookup, as we have to iterate over the list of possible words. &amp;nbsp;But it's great any time we care just about anagrams and it's much more efficient in terms of the number of lookups required to find all the scrabble words. &amp;nbsp;For example, for the same 10 letter case from earlier we now need only&amp;nbsp;1024 lookups. &amp;nbsp;~26 thousand lookups for the wildcard case.Without further ado that solution looks like this: One other really useful bit is a quick way to look for all the words that have a given suffix or prefix. This is a little trickier than the anagram case but it's also more interesting because I got to spend a little time reading about a new data structure, a Trie. A Trie is a tree-like structure optimized for storing strings. &amp;nbsp;The root node of the tree represents the empty string and each of its children represents the first letter of a word. &amp;nbsp;Every child of these nodes is the next letter in a word starting with that substring. &amp;nbsp;For example, a trie of nodes for the words &quot;an apple yum&quot; would look like:So the trie solution for finding words that begin with a certain prefix is: The suffix version is just a couple more lines with judicious use of the reversed function.Conclusion and Next StepsI think that Words with Friends is a lot more fun now that I have my computer as a crutch. &amp;nbsp;I've enjoyed playing with some simple algorithms for finding algorithms and looking up strings.My next steps after today are going to be putting up my utilities here on my website so that I can share them with my non-programmer friends. &amp;nbsp;Building a simple web service for solving/cheating at scrabble is a hopefully interesting topic in its own right so building that will probably be my next blog post.After that I'm interested in taking this to its logical conclusion and actually building (and blogging about) a scrabble solver where you can enter in the whole state of the scrabble board and your hand and have it tell you all your possible moves (or at least the subset of moves that give you higher scores).If you made it this far you might be interested in the actual tested source code here on github.1Larry Wall&amp;nbsp;calls this the first great virtue of a programmer. &amp;nbsp;2Perhaps a more honest heading here would be &quot;Cheating at Words With Friends&quot; :-)</summary></entry><entry><title type="html">Emacs Archaeology</title><link href="http://localhost:4000/programming/emacs/2012/01/21/emacs-archaeology.html" rel="alternate" type="text/html" title="Emacs Archaeology" /><published>2012-01-21T00:00:00-06:00</published><updated>2012-01-21T00:00:00-06:00</updated><id>http://localhost:4000/programming/emacs/2012/01/21/emacs-archaeology</id><content type="html" xml:base="http://localhost:4000/programming/emacs/2012/01/21/emacs-archaeology.html">&lt;div class='post'&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;br /&gt;Recently a friend asked me for my Emacs configuration.  &lt;a href=&quot;http://en.wikipedia.org/wiki/Richard_Stallman&quot;&gt;RMS&lt;/a&gt; would excommunicate me from the &lt;a href=&quot;http://en.wikipedia.org/wiki/Editor_war#Humour&quot;&gt;church&lt;/a&gt; if I didn't make my configuration available to any who asked so, of course, I started packaging it up and shipping it off to my friend.  However, to help my friend it seemed reasonable to explain what all I've accumulated over the last few years, highlight some areas she might want to customize differently, and to point out some modes and tools I find particularly helpful in my day to day work.&lt;br /&gt;&lt;br /&gt;After opening up a terminal and poking around in my ~/etc/emacs.d directory I started to realize that after all this time I wasn't entirely familiar with my Emacs configuration either.  Of course, no one has any geek cred at all if they can't explain how their editors configured so I started digging in to remind myself what the heck all this stuff does. &amp;nbsp;&lt;/span&gt;Here's a few numbers. Over the years I've written ~1500 lines of elisp code spread across 27 *.el files and accumulated another ~60,000 lines of dependencies (mostly downloaded from &lt;a href=&quot;http://www.emacswiki.org/&quot;&gt;EmacsWiki&lt;/a&gt; and/or &lt;a href=&quot;http://emacs-fu.blogspot.com/&quot;&gt;Emacs Fu&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;In any event, over the next few weeks I'll be cleaning things up a bit and posting more about some of the things about Emacs I really love.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;If anyone's interested in my current configuration I have a bitbucket repo (maybe I should move it to&lt;br /&gt;github?) here (&lt;a href=&quot;https://bitbucket.org/steder/dotfiles&quot;&gt;https://bitbucket.org/steder/dotfiles&lt;/a&gt;) with all of my&lt;br /&gt;dotfiles including the emacs stuff if you'd like to take a look.&lt;/span&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Recently a friend asked me for my Emacs configuration. RMS would excommunicate me from the church if I didn't make my configuration available to any who asked so, of course, I started packaging it up and shipping it off to my friend. However, to help my friend it seemed reasonable to explain what all I've accumulated over the last few years, highlight some areas she might want to customize differently, and to point out some modes and tools I find particularly helpful in my day to day work.After opening up a terminal and poking around in my ~/etc/emacs.d directory I started to realize that after all this time I wasn't entirely familiar with my Emacs configuration either. Of course, no one has any geek cred at all if they can't explain how their editors configured so I started digging in to remind myself what the heck all this stuff does. &amp;nbsp;Here's a few numbers. Over the years I've written ~1500 lines of elisp code spread across 27 *.el files and accumulated another ~60,000 lines of dependencies (mostly downloaded from EmacsWiki and/or Emacs Fu).In any event, over the next few weeks I'll be cleaning things up a bit and posting more about some of the things about Emacs I really love.If anyone's interested in my current configuration I have a bitbucket repo (maybe I should move it togithub?) here (https://bitbucket.org/steder/dotfiles) with all of mydotfiles including the emacs stuff if you'd like to take a look.</summary></entry><entry><title type="html">Recipe: Programmatically Creating and Updating AWS security groups</title><link href="http://localhost:4000/2011/12/19/recipe-programmatically-creating-and.html" rel="alternate" type="text/html" title="Recipe: Programmatically Creating and Updating AWS security groups" /><published>2011-12-19T00:00:00-06:00</published><updated>2011-12-19T00:00:00-06:00</updated><id>http://localhost:4000/2011/12/19/recipe-programmatically-creating-and</id><content type="html" xml:base="http://localhost:4000/2011/12/19/recipe-programmatically-creating-and.html">&lt;div class='post'&gt;
I think I've rewritten this code 3 times now in the last year so it seems prudent to save it somewhere. &amp;nbsp;If other folks find it useful that'd be great.&lt;br /&gt;&lt;br /&gt;The problem is a simple one. &amp;nbsp;You're looking to setup and install of a few machines on EC2, perhaps to run something fun like a Cassandra cluster.&lt;br /&gt;&lt;br /&gt;Typically it's really tempting to just setup the security group once and never ever touch it again. &amp;nbsp;I'd log into the the AWS console, and following along with&amp;nbsp;&lt;a href=&quot;http://www.datastax.com/docs/1.0/install/install_ami&quot;&gt;this datastax guide&lt;/a&gt;&amp;nbsp;I would manually setup the group, launch instances, etc.&lt;br /&gt;&lt;br /&gt;However, without automation there's some duplication of effort whenever someone on your team sets up a cluster and possibility for user error setting up security groups. &amp;nbsp;And of course we're already automating the other important bits like &quot;launch a new instance&quot; or &quot;run a backup&quot; already so why not manage security groups with the same scripts?&lt;br /&gt;&lt;br /&gt;I'm currently working with&amp;nbsp;&lt;a href=&quot;http://docs.fabfile.org/&quot;&gt;Fabric&lt;/a&gt;&amp;nbsp;to automate EC2 stuff so I pulled out the Python code I'm using to handle creation of security groups and permission rules within those groups.&lt;br /&gt;&lt;br /&gt;The script attempts to be idempotent. &amp;nbsp;The idea here is that simply rerunning the script will, only if necessary, create groups, revoke old rules and authorize any new ones. &lt;br /&gt;&lt;br /&gt;Anyway, without further ado &lt;a href=&quot;https://gist.github.com/1498451&quot;&gt;here's the script&lt;/a&gt;:  &lt;script src=&quot;https://gist.github.com/1498451.js?file=aws_sg_recipe.py&quot;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">I think I've rewritten this code 3 times now in the last year so it seems prudent to save it somewhere. &amp;nbsp;If other folks find it useful that'd be great.The problem is a simple one. &amp;nbsp;You're looking to setup and install of a few machines on EC2, perhaps to run something fun like a Cassandra cluster.Typically it's really tempting to just setup the security group once and never ever touch it again. &amp;nbsp;I'd log into the the AWS console, and following along with&amp;nbsp;this datastax guide&amp;nbsp;I would manually setup the group, launch instances, etc.However, without automation there's some duplication of effort whenever someone on your team sets up a cluster and possibility for user error setting up security groups. &amp;nbsp;And of course we're already automating the other important bits like &quot;launch a new instance&quot; or &quot;run a backup&quot; already so why not manage security groups with the same scripts?I'm currently working with&amp;nbsp;Fabric&amp;nbsp;to automate EC2 stuff so I pulled out the Python code I'm using to handle creation of security groups and permission rules within those groups.The script attempts to be idempotent. &amp;nbsp;The idea here is that simply rerunning the script will, only if necessary, create groups, revoke old rules and authorize any new ones. Anyway, without further ado here's the script:</summary></entry><entry><title type="html">Simple Nosy Script: Personal Continuous Integration for TDD</title><link href="http://localhost:4000/python/testing/programming/2011/09/15/simple-nosy-script-personal-continuous.html" rel="alternate" type="text/html" title="Simple Nosy Script:  Personal Continuous Integration for TDD" /><published>2011-09-15T00:00:00-05:00</published><updated>2011-09-15T00:00:00-05:00</updated><id>http://localhost:4000/python/testing/programming/2011/09/15/simple-nosy-script-personal-continuous</id><content type="html" xml:base="http://localhost:4000/python/testing/programming/2011/09/15/simple-nosy-script-personal-continuous.html">&lt;div class='post'&gt;
I recently cleaned up and resurrected my old nosy script. &amp;nbsp;These days there are a few alternatives on PyPI as well though I prefer mine. &amp;nbsp;The whole concept of nosy is simply to rerun the tests whenever the code changes. &amp;nbsp;Personally, I find a script like this is really helpful for maintaining flow while doing test driven development.&lt;br /&gt;&lt;br /&gt;What I like about this nosy script is that it allows me to basically just say &quot;run this nosetests / trial command every time the code changes&quot; and nothing else. &amp;nbsp;There's no config file to setup or any tool specific arguments. &amp;nbsp;You just need to know how to use your test runner.&lt;br /&gt;&lt;br /&gt;Here's the code in case anyone is interested:&amp;nbsp;&lt;a href=&quot;https://gist.github.com/1220683&quot;&gt;https://gist.github.com/1220683&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Oh, and despite the name I've used it successfully to work on twisted projects with trial. &amp;nbsp;I'm also willing to bet that it would work just fine with py.test.&lt;br /&gt;&lt;br /&gt;Edit: &amp;nbsp;The polling loop with a time.sleep(1) is eating away at me now that I've posted this. &amp;nbsp;I'm thinking that the only way to live with myself is to replace that with listening for real filesystem events ala inotify... So do ease my conscience I'll see about doing a followup post to show what the script would look like with filesystem events instead of the polling loop..&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">I recently cleaned up and resurrected my old nosy script. &amp;nbsp;These days there are a few alternatives on PyPI as well though I prefer mine. &amp;nbsp;The whole concept of nosy is simply to rerun the tests whenever the code changes. &amp;nbsp;Personally, I find a script like this is really helpful for maintaining flow while doing test driven development.What I like about this nosy script is that it allows me to basically just say &quot;run this nosetests / trial command every time the code changes&quot; and nothing else. &amp;nbsp;There's no config file to setup or any tool specific arguments. &amp;nbsp;You just need to know how to use your test runner.Here's the code in case anyone is interested:&amp;nbsp;https://gist.github.com/1220683Oh, and despite the name I've used it successfully to work on twisted projects with trial. &amp;nbsp;I'm also willing to bet that it would work just fine with py.test.Edit: &amp;nbsp;The polling loop with a time.sleep(1) is eating away at me now that I've posted this. &amp;nbsp;I'm thinking that the only way to live with myself is to replace that with listening for real filesystem events ala inotify... So do ease my conscience I'll see about doing a followup post to show what the script would look like with filesystem events instead of the polling loop..</summary></entry></feed>